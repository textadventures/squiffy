---
interface Props {
    script: string;
}

import Split from "./Split.astro";

const { script } = Astro.props;
---

<style is:global>
    a.squiffy-link
    {
        text-decoration: underline;
        color: var(--sl-color-text-accent);
        cursor: pointer;
    }
    a.squiffy-link.disabled, div.squiffy-output-section:not(:last-child) a.squiffy-link
    {
        text-decoration: inherit;
        color: inherit !important;
        cursor: inherit;
    }
    div.squiffy-output-block:not(:last-child), div.squiffy-output-section:not(:last-child)
    {
        margin-bottom: 1em;
        border-bottom: 1px solid #ccc;
    }
    .viewer-container {
        padding: 0.5em;
    }
    .viewer p {
        margin-bottom: 1rem;
    }
    .sample-button {
        background: transparent;
        color: var(--sl-color-accent, #4f46e5);
        border: 1px solid var(--sl-color-accent, #4f46e5);
        border-radius: 0.5rem;
        padding: 0.4rem 1rem;
        font-size: 0.8rem;
        font-weight: 500;
        cursor: pointer;
        transition: background 0.2s ease, color 0.2s ease, transform 0.15s ease;
    }
    .sample-button:hover {
        background: color-mix(in srgb, var(--sl-color-accent, #4f46e5) 15%, white);
        color: var(--sl-color-accent, #4f46e5);
        transform: translateY(-2px);
    }
    .sample-button:active {
        transform: translateY(0);
        background: color-mix(in srgb, var(--sl-color-accent, #4f46e5) 25%, white);
    }
    .sample-button:focus {
        outline: 2px solid var(--sl-color-accent, #4f46e5);
        outline-offset: 2px;
    }
    .restart.hidden {
        display: none;
    }
</style>

<squiffy-sample class="sample not-content" data-squiffy-script={script}>
    <Split gap="0.75rem" min="200px">
        <div slot="left" class="editor">
        </div>
        <div slot="right" class="viewer-container">
            <div class="viewer"></div>
            <button class="restart hidden sample-button">Restart</button>
        </div>
    </Split>
</squiffy-sample>

<script>
    import {basicSetup, EditorView} from 'codemirror';
    import { compile as squiffyCompile } from 'squiffy-compiler';
    import {init as runtimeInit} from 'squiffy-runtime';
    import type { SquiffyApi } from 'squiffy-runtime';
    import debounce from 'debounce';

    class Sample extends HTMLElement {
        connectedCallback() {
            let script = '';

            const editor = this.querySelector('.editor') as HTMLElement;
            if (!editor) return;

            const viewer = this.querySelector('.viewer') as HTMLElement;
            if (!viewer) return;

            let squiffyApi: SquiffyApi | null;
            let loaded = false;

            const restart = this.querySelector('.restart') as HTMLButtonElement;

            const init = async () => {
                console.log("init...");
                await initRuntime(script, viewer, restart);
            };

            const updateListener = EditorView.updateListener.of(async (update) => {
                const value = update.state.doc.toString();
                if (value == script) {
                    console.log("erk");
                    return;
                }

                script = value;

                if (!loaded) {
                    loaded = true;
                    await init();
                } else {
                    debounce(init, 1000)();
                }
            });

            new EditorView({
                doc: this.dataset.squiffyScript,
                extensions: [
                    basicSetup,
                    EditorView.lineWrapping,
                    EditorView.theme({
                        ".cm-content": {fontSize: "13px"},
                        ".cm-lineNumbers": {fontSize: "13px"},
                    }),
                    updateListener
                ],
                parent: editor
            });

            async function initRuntime(script: string, outputContainer: HTMLElement, restartButton: HTMLElement) {
                const result = await squiffyCompile({
                    scriptBaseFilename: "filename.squiffy",
                    script: script,
                });

                if (!result.success) {
                    console.error("Failed to compile script", result.errors);
                    return;
                }

                const data = result.output;
                const js = data.js.map(jsLines => new Function('squiffy', 'get', 'set', jsLines.join('\n')));

                if (squiffyApi)
                {
                    const story = {
                        js: js as any,
                        ...result.output.story,
                    };
                    squiffyApi.update(story);
                }
                else {
                    outputContainer.innerHTML = '';
                    const output = document.createElement('div');
                    outputContainer.appendChild(output);

                    squiffyApi = runtimeInit({
                        element: output,
                        scroll: 'element',
                        persist: false,
                        story: {
                            js: js as any,
                            ...data.story,
                        }
                    });

                    const showRestartOnLinkClick = () => {
                        squiffyApi?.once('linkClick', () => {
                            restartButton.classList.remove('hidden');
                        });
                    };

                    showRestartOnLinkClick();

                    restartButton.addEventListener('click', () => {
                        squiffyApi?.restart();
                        restartButton.classList.add('hidden');
                        showRestartOnLinkClick();
                    });
                }
            }
        }
    }
    customElements.define('squiffy-sample', Sample);
</script>